cmake_minimum_required(VERSION 2.8.2)

project(OpenSSL-download NONE)
include(ExternalProject)

#------------------------------------------------------------------------------
if(UNIX)
  set(OPENSSL_DOWNLOAD_VERSION "1.0.2n" CACHE STRING "Version of OpenSSL source package to download")
  set_property(CACHE OPENSSL_DOWNLOAD_VERSION PROPERTY STRINGS "1.0.1e" "1.0.1l" "1.0.2n")

  set(OpenSSL_1.0.1e_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/sources/openssl-1.0.1e.tar.gz)
  set(OpenSSL_1.0.1e_MD5 66bf6f10f060d561929de96f9dfe5b8c)

  set(OpenSSL_1.0.1l_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/sources/openssl-1.0.1l.tar.gz)
  set(OpenSSL_1.0.1l_MD5 cdb22925fc9bc97ccbf1e007661f2aa6)

  set(OpenSSL_1.0.2n_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/sources/openssl-1.0.2n.tar.gz)
  set(OpenSSL_1.0.2n_MD5 13bdc1b1d1ff39b6fd42a255e74676a4)

  if(NOT DEFINED OpenSSL_${OPENSSL_DOWNLOAD_VERSION}_URL)
    message(FATAL_ERROR "There is no source version of OpenSSL ${OPENSSL_DOWNLOAD_VERSION} available.
You could either:
(1) disable SSL support configuring with option Slicer_USE_PYTHONQT_WITH_OPENSSL:BOOL=OFF
or
(2) configure Slicer providing your own version of OpenSSL that matches the version
   of OpenSSL also used to compile Qt library.
   The options to specify are OPENSSL_INCLUDE_DIR, OPENSSL_SSL_LIBRARY, OPENSSL_CRYPTO_LIBRARY.")
  endif()

  #------------------------------------------------------------------------------
  set(EP_SOURCE_DIR ${CMAKE_BINARY_DIR}/OpenSSL)

  # environment
  set(_env_script ${CMAKE_BINARY_DIR}/OpenSSL_Env.cmake)
  file(APPEND ${_env_script}
"#------------------------------------------------------------------------------
# Added by '${CMAKE_CURRENT_LIST_FILE}'
set(CMAKE_BINARY_DIR \"${CMAKE_BINARY_DIR}\")
set(ENV{VS_UNICODE_OUTPUT} \"\")
")
  if(APPLE)
    file(APPEND ${_env_script}
"# Hint OpenSSL that we prefer a 64-bit build.
set(ENV{KERNEL_BITS} \"64\")
# Allow 'sysctl' executable used in OpenSSL config script to be found.
# This is required when building Slicer using a cronjob where the
# default environment is restricted.
set(ENV{PATH} \"/usr/sbin:\$ENV{PATH}\")
")
  endif()

  # configure step
  set(_configure_script ${CMAKE_BINARY_DIR}/OpenSSL_configure_step.cmake)

  message(STATUS "Calling ExternalProject_Add")
  #------------------------------------------------------------------------------
  ExternalProject_Add(OpenSSL
    ${OpenSSL_EP_ARGS}
    URL ${OpenSSL_${OPENSSL_DOWNLOAD_VERSION}_URL}
    URL_MD5 ${OpenSSL_${OPENSSL_DOWNLOAD_VERSION}_MD5}
    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}
    SOURCE_DIR ${EP_SOURCE_DIR}
    BUILD_IN_SOURCE 1
    PATCH_COMMAND ${CMAKE_COMMAND} -P ${_configure_script}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND make -j1 build_libs
    INSTALL_COMMAND ""
#    DEPENDS zlib
  )

  message(STATUS "Calling ExternalProject_Add_Step")
  if(APPLE)
    ExternalProject_Add_Step(OpenSSL fix_rpath
      COMMAND install_name_tool -id ${EP_SOURCE_DIR}/libcrypto.dylib ${EP_SOURCE_DIR}/libcrypto.dylib
      COMMAND install_name_tool
        -change /usr/local/ssl/lib/libcrypto.1.0.0.dylib ${EP_SOURCE_DIR}/libcrypto.dylib
        -id ${EP_SOURCE_DIR}/libssl.dylib ${EP_SOURCE_DIR}/libssl.dylib
      DEPENDEES build
      )
  endif()

  set(OpenSSL_DIR ${EP_SOURCE_DIR})
  set(OPENSSL_INCLUDE_DIR ${OpenSSL_DIR}/include)
  set(OPENSSL_LIBRARY_DIR ${OpenSSL_DIR})
  set(OPENSSL_EXPORT_LIBRARY_DIR ${OpenSSL_DIR})

  set(OPENSSL_CRYPTO_LIBRARY ${OPENSSL_LIBRARY_DIR}/libcrypto${CMAKE_SHARED_LIBRARY_SUFFIX})
  set(OPENSSL_SSL_LIBRARY ${OPENSSL_LIBRARY_DIR}/libssl${CMAKE_SHARED_LIBRARY_SUFFIX})

#------------------------------------------------------------------------------
elseif(WIN32)

  set(OPENSSL_DOWNLOAD_VERSION "1.0.1h" CACHE STRING "Version of OpenSSL pre-compiled package to download.")
  set_property(CACHE OPENSSL_DOWNLOAD_VERSION PROPERTY STRINGS "1.0.1h" "1.0.1l")

  set(_error_msg "There is no pre-compiled version of OpenSSL ${OPENSSL_DOWNLOAD_VERSION} available for
this version of visual studio [${MSVC_VERSION}]. You could either:
(1) disable SSL support configuring with option Slicer_USE_PYTHONQT_WITH_OPENSSL:BOOL=OFF
or
(2) configure Slicer providing your own version of OpenSSL that matches the version
   of OpenSSL also used to compile Qt library.
   The options to specify are OPENSSL_INCLUDE_DIR, LIB_EAY_DEBUG, LIB_EAY_RELEASE,
   SSL_EAY_DEBUG and SSL_EAY_RELEASE.")

  #--------------------
  if(CMAKE_SIZEOF_VOID_P EQUAL 4) # 32-bit

    # OpenSSL 1.0.1h
    # VS2008
    set(OpenSSL_1.0.1h_1500_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1500-32.tar.gz)
    set(OpenSSL_1.0.1h_1500_MD5 8b110bb48063223c3b9f3a99f1fa9067)
    # VS2010
    set(OpenSSL_1.0.1h_1600_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1600-32.tar.gz)
    set(OpenSSL_1.0.1h_1600_MD5 e80269ae7969276977a342cccc1df5c5)
    # VS2013
    set(OpenSSL_1.0.1h_1800_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1800-32.tar.gz)
    set(OpenSSL_1.0.1h_1800_MD5 f10ceb422ab37f2b0bd5e225c74fd1d4)
    # VS2015, VS2017 and VS2019
    if(${MSVC_VERSION} VERSION_GREATER_EQUAL 1900)
      set(OpenSSL_1.0.1h_${MSVC_VERSION}_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1900-32.tar.gz)
      set(OpenSSL_1.0.1h_${MSVC_VERSION}_MD5 e0e26ae6ac5693d266c804e738d7aa14)
    endif()

    # OpenSSL 1.0.1l
    # VS2008
    set(OpenSSL_1.0.1l_1500_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1l/OpenSSL_1_0_1l-install-msvc1500-32.tar.gz)
    set(OpenSSL_1.0.1l_1500_MD5 85218e0ea7bd15457f66cc04170560d5)
    # VS2010
    set(OpenSSL_1.0.1l_1600_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1l/OpenSSL_1_0_1l-install-msvc1600-32.tar.gz)
    set(OpenSSL_1.0.1l_1600_MD5 3f756fc731fb95f919ea24f2ec979732)

  #--------------------
  elseif(CMAKE_SIZEOF_VOID_P EQUAL 8) # 64-bit

    # OpenSSL 1.0.1h
    # VS2008
    set(OpenSSL_1.0.1h_1500_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1500-64.tar.gz)
    set(OpenSSL_1.0.1h_1500_MD5 dab0c026ab56fd0fbfe2843d14218fad)
    # VS2010
    set(OpenSSL_1.0.1h_1600_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1600-64.tar.gz)
    set(OpenSSL_1.0.1h_1600_MD5 b54a0a4b396397fdf96e55f0f7345dd1)
    # VS2013
    set(OpenSSL_1.0.1h_1800_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1800-64.tar.gz)
    set(OpenSSL_1.0.1h_1800_MD5 7aefdd94babefbe603cca48ff86da768)
    # VS2015, VS2017 and VS2019
    if(${MSVC_VERSION} VERSION_GREATER_EQUAL 1900)
      set(OpenSSL_1.0.1h_${MSVC_VERSION}_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1h/OpenSSL_1_0_1h-install-msvc1900-64.tar.gz)
      set(OpenSSL_1.0.1h_${MSVC_VERSION}_MD5 f93d266def384926015550452573e824)
    endif()

    # OpenSSL 1.0.1l
    # VS2008
    set(OpenSSL_1.0.1l_1500_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1l/OpenSSL_1_0_1l-install-msvc1500-64.tar.gz)
    set(OpenSSL_1.0.1l_1500_MD5 ce819931504f8e7c5d9024215b2cc9cf)
    # VS2010
    set(OpenSSL_1.0.1l_1600_URL https://github.com/Slicer/Slicer-OpenSSL/releases/download/1.0.1l/OpenSSL_1_0_1l-install-msvc1600-64.tar.gz)
    set(OpenSSL_1.0.1l_1600_MD5 07d259e1a467d9c7a7d9cddfd77e8915)

  endif()

  if(NOT DEFINED OpenSSL_${OPENSSL_DOWNLOAD_VERSION}_${MSVC_VERSION}_URL)
    message(FATAL_ERROR ${_error_msg})
  endif()

  #------------------------------------------------------------------------------
  set(EP_SOURCE_DIR ${CMAKE_BINARY_DIR}/OpenSSL-install)

  ExternalProject_Add(OpenSSL
    ${OpenSSL_EP_ARGS}
    URL ${OpenSSL_${OPENSSL_DOWNLOAD_VERSION}_${MSVC_VERSION}_URL}
    URL_MD5 ${OpenSSL_${OPENSSL_DOWNLOAD_VERSION}_${MSVC_VERSION}_MD5}
    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}
    SOURCE_DIR ${EP_SOURCE_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
#    DEPENDS zlib
  )

  set(OpenSSL_DIR ${EP_SOURCE_DIR})
  set(_openssl_base_dir ${OpenSSL_DIR})
  if(DEFINED CMAKE_CONFIGURATION_TYPES)
    set(OpenSSL_DIR ${OpenSSL_DIR}/${CMAKE_CFG_INTDIR})
    set(_copy_release_directory 1)
  else()
    set(OpenSSL_DIR ${OpenSSL_DIR}/${CMAKE_BUILD_TYPE})
    if(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
      set(_copy_release_directory 1)
    endif()
  endif()

  # Support building in RelWithDebInfo configuration
  if(_copy_release_directory)
    ExternalProject_Add_Step(OpenSSL copy_release_directory
      COMMAND ${CMAKE_COMMAND} -E copy_directory "${_openssl_base_dir}/Release" "${_openssl_base_dir}/RelWithDebInfo"
      COMMENT "Copying '${_openssl_base_dir}/Release' to '${_openssl_base_dir}/RelWithDebInfo'"
      DEPENDEES install
      )
  endif()

  set(OPENSSL_INCLUDE_DIR "${OpenSSL_DIR}/include")
  set(OPENSSL_LIBRARY_DIR "${OpenSSL_DIR}/lib")
  set(OPENSSL_EXPORT_LIBRARY_DIR "${OpenSSL_DIR}/bin")

  set(LIB_EAY_DEBUG "${EP_SOURCE_DIR}/Debug/lib/libeay32.lib")
  set(LIB_EAY_RELEASE "${EP_SOURCE_DIR}/Release/lib/libeay32.lib")
  set(SSL_EAY_DEBUG "${EP_SOURCE_DIR}/Debug/lib/ssleay32.lib")
  set(SSL_EAY_RELEASE "${EP_SOURCE_DIR}/Release/lib/ssleay32.lib")

  ExternalProject_Message(OpenSSL "LIB_EAY_DEBUG:${LIB_EAY_DEBUG}")
  ExternalProject_Message(OpenSSL "LIB_EAY_RELEASE:${LIB_EAY_RELEASE}")
  ExternalProject_Message(OpenSSL "SSL_EAY_DEBUG:${SSL_EAY_DEBUG}")
  ExternalProject_Message(OpenSSL "SSL_EAY_RELEASE:${SSL_EAY_RELEASE}")
endif()

#-----------------------------------------------------------------------------
# Launcher setting specific to build tree

set(OpenSSL_LIBRARY_PATHS_LAUNCHER_BUILD ${OPENSSL_EXPORT_LIBRARY_DIR})

if(UNIX)
  set(OPENSSL_LIBRARIES ${OPENSSL_CRYPTO_LIBRARY} ${OPENSSL_SSL_LIBRARY})
elseif(WIN32)
  include(SelectLibraryConfigurations)
  set(LIB_EAY_LIBRARY_DEBUG "${LIB_EAY_DEBUG}")
  set(LIB_EAY_LIBRARY_RELEASE "${LIB_EAY_RELEASE}")
  set(SSL_EAY_LIBRARY_DEBUG "${SSL_EAY_DEBUG}")
  set(SSL_EAY_LIBRARY_RELEASE "${SSL_EAY_RELEASE}")
  select_library_configurations(LIB_EAY)
  select_library_configurations(SSL_EAY)
  set(OPENSSL_LIBRARIES ${SSL_EAY_LIBRARY} ${LIB_EAY_LIBRARY})
endif()
